v8_install()
v8_install()
v8 <- v8()
v8
v8::v8::source("https://cdn.ethers.io/lib/ethers-5.1.umd.min.js")
v8$source("https://cdn.ethers.io/lib/ethers-5.1.umd.min.js")
ct <- v8()
ct$source("https://cdn.ethers.io/lib/ethers-5.1.umd.min.js")
ct
ct$source
ct$source('https://cdn.ethers.io/lib/ethers-5.1.umd.min.js')
ct <- v8()
ct$source('https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.13.6/underscore-min.js')
ct$source('https://cdn.ethers.io/lib/ethers-5.1.umd.min.js')
y_matrix <- matrix(0, nrow = 1000, ncol = 1000)
y_matrix <- matrix(0.125, nrow = 1000, ncol = 1000)
y_matrix <- matrix(0.125, nrow = 10000, ncol = 10000)
library(igraph)
graph_from_adjacency_matrix(y_matrix)
g <- graph_from_adjacency_matrix(y_matrix)
g
plot(g)
1
plot(g,layout=layout_nicely(g),vertex.size=0.8,edge.width=0.1,vertex.label=NA)
plot(g,layout=layout_nicely(g),vertex.size=0.8,edge.width=0.25,vertex.label=NA)
plot(minimum.spanning.tree(g))
plot(minimum.spanning.tree(g),vertex.size=0.8)
plot(minimum.spanning.tree(g),vertex.size=0.8,vertex.label=NA)
V(g)
E(g)
z_matrix
y_matrix
y_matrix[1,1]
y_matrix <- matrix(1, nrow = 10000, ncol = 10000)
g <- graph_from_adjacency_matrix(y_matrix,vertex.size)
g <- graph_from_adjacency_matrix(y_matrix)
g
plot(minimum.spanning.tree(g),vertex.size=0.8,vertex.label=NA)
plot(minimum.spanning.tree(g),vertex.size=0.8,vertex.label=NA,edge.width=0.1)
plot(minimum.spanning.tree(g),vertex.size=0.3,vertex.label=NA,edge.width=0.03)
plot(minimum.spanning.tree(g),vertex.size=0.3,vertex.label=NA,edge.width=0.005)
# create an example graph
g <- make_ring(10)
g
plot(g)
# add vertex attributes to the graph
V(g)$x <- rnorm(10)
V(g)$y <- rnorm(10)
V(g)$x
k <- 2
clusters <- kmeans(matrix(c(V(g)$x, V(g)$y), ncol=2), centers=k)
# plot the graph with each vertex colored according to its cluster assignment
plot(g, vertex.color=clusters$cluster)
data
setwd("~/Desktop/skola/zhluky/scripts")
accountData <- read.csv('../data/mainData.csv', stringsAsFactors = TRUE, colClasses = c("id" = "character", "entity" = "character", "addressType" = "character"))
# Prehlad dat
# prvych par riadkov bez prveho stlpca, prvy stlpec ukayuje priebeh balancu v kazdom bloku. z toho sa pocital priemer a ostal v datovej sade kdyby 'neco',, tj. mohol mat nejake vyuzitie.
accountData[1:5, -c(1) ]
# nejake statistiky
# pocet roznych uctov
length(accountData[,1])
# kolko je z danych penazeniek istotne s oznacecim (miner,exchange,defi), tj mame olablovanych 39 entit a ostatne su nezname ale podla znamych statistik penazenky sukr. osob
length(accountData[accountData[,4] ==  'Mining', 1])
length(accountData[accountData[,4] ==  'DeFi', 1])
length(accountData[accountData[,4] ==  'Exchange', 1])
length(accountData[accountData[,14] ==  'Wallet', 1])
length(accountData[accountData[,14] ==  'Smart Contract', 1])
# priemery a mediany pre
# minBalance maxBalance countAsSender totalSent totalReceived coununtAsReceiver  avgSent avgReceived avgBalance
# pre countAsSender, countAsReceiver nie je jednoznacna jednotka, mozno som pri parsingu prehliadol a urobil nejaku malu chybicku
colMeans(accountData[, c(2, 3, 5, 6, 7, 8, 9, 10, 13)])
apply(accountData[, c(2, 3, 5, 6, 7, 8, 9, 10, 13)], 2, median)
# teraz si pozrieme plot velkosti balancu vsetkych penazeniek v log skale
# PCA
# vyberieme len data, s ktorymi v pca budeme narabat
pcaData <- accountData[,c(2,3,5,6,7,8,9,10,13)]
colors <- rep('black', 10049)
colors[accountData[,4] == 'Exchange'] <- 'blue'
colors[accountData[,4] == 'Mining'] <- 'red'
colors[accountData[,4] == 'DeFi'] <- 'green'
# 2D pca s outlierom
pcaResultFull <- prcomp(pcaData, scale = TRUE)
# to je fajn ale ten jeden ma obrovsky balance a kvoli tomu ostatnych balance sa tazsie vie navzajom provnavat, tak ho odstranime
maxIdx <- which.max(pcaData[,9])
pcaDataOriginal <- pcaData
pcaData <- pcaData[-maxIdx,]
pcaResult <- prcomp(pcaData, scale = TRUE)
colors <- colors[-maxIdx]
autoplot( pcaResult,
data=pcaResult,
col = colors,
loadings=TRUE,
loadings.label = TRUE)
# 3D PCA
library(rgl)
scale <- 100
options(rgl.printRglwidget = TRUE)
plot3d(pcaResult$x[,1:3], col=colors)
coords <- NULL
for (i in 1:nrow(pcaResult$rotation)) {
coords <- rbind(coords, rbind(c(0,0,0),pcaResult$rotation[i,1:3]))
}
text3d(pcaResult$rotation[,1:3] * scale ,
texts=rownames(pcaResult$rotation),
col="red",
cex=0.8)
coords <- coords * scale
lines3d(coords, col="red", lwd=2)
kMeansResult <- kmeans(scale(pcaData),5)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
# Specializovane procedury na HK nam ponuka kniznica cluster
library(cluster)
# Aglomerativne zhlukovanie
help(agnes)
# Data pred aplikaciou HK standardizujeme a pouzijeme metodu "average" na meranie vzdialenosti zhlukov
plan.agnes1 <- agnes(pcaData[1:1000,], stand = TRUE, method = "average")
summary(plan.agnes1)
# Uplnu reprezentaciu dendrogramu poskytne zlozka merge
# -cislo znamena, ze zlucujeme objekt "cislo"
# (+)cislo znamena, ze spajame uz cely zhluk objektov, vytvoreny v riadku "cislo" matice
plan.agnes1$merge
# Dendrogram si mozeme nakreslit
plot(plan.agnes1, which.plots = 2, hang = -1)
help(plot.agnes1)
# Porovnajme vysledok pouzitim inych metod merania vzdialenosti medzi zhlukmi
plan.agnes2 <- agnes(planets[, 4:8], stand = TRUE, method = "single")
# Divizivne zhlukovanie
help(diana)
# Data pred aplikaciou HK standardizujeme. Divizivne zhlukovanie nemeria vzdialenosti zhlukov
plan.diana <- diana(pcaData[1:1000,], stand = TRUE)
summary(plan.diana)
plot(plan.diana, which.plots = 2, hang = -1)
# K-Means
best <- rep(0, 20)
for (k in 1:20) best[k] <- kmeans(scale(pcaData), centers = k, nstart = 100)$tot.withinss
plot(1:20, best, type = "b")
# K-Means
best <- rep(0, 30)
for (k in 1:30) best[k] <- kmeans(scale(pcaData), centers = k, nstart = 100)$tot.withinss
plot(1:30, best, type = "b")
tot.withinss
plot(1:30, xlab = 'k', ylab = 'MSL', best, type = "b")
kMeansResult <- kmeans(scale(pcaData), 7)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
# 3D PCA
library(rgl)
autoplot( pcaResult,
data=pcaResult,
col = colors,
loadings=TRUE,
loadings.label = TRUE)
accountData <- read.csv('../data/mainData.csv', stringsAsFactors = TRUE, colClasses = c("id" = "character", "entity" = "character", "addressType" = "character"))
# Prehlad dat
# prvych par riadkov bez prveho stlpca, prvy stlpec ukayuje priebeh balancu v kazdom bloku. z toho sa pocital priemer a ostal v datovej sade kdyby 'neco',, tj. mohol mat nejake vyuzitie.
accountData[1:5, -c(1) ]
# nejake statistiky
# pocet roznych uctov
length(accountData[,1])
# kolko je z danych penazeniek istotne s oznacecim (miner,exchange,defi), tj mame olablovanych 39 entit a ostatne su nezname ale podla znamych statistik penazenky sukr. osob
length(accountData[accountData[,4] ==  'Mining', 1])
length(accountData[accountData[,4] ==  'DeFi', 1])
length(accountData[accountData[,4] ==  'Exchange', 1])
length(accountData[accountData[,14] ==  'Wallet', 1])
length(accountData[accountData[,14] ==  'Smart Contract', 1])
# priemery a mediany pre
# minBalance maxBalance countAsSender totalSent totalReceived coununtAsReceiver  avgSent avgReceived avgBalance
# pre countAsSender, countAsReceiver nie je jednoznacna jednotka, mozno som pri parsingu prehliadol a urobil nejaku malu chybicku
colMeans(accountData[, c(2, 3, 5, 6, 7, 8, 9, 10, 13)])
apply(accountData[, c(2, 3, 5, 6, 7, 8, 9, 10, 13)], 2, median)
# teraz si pozrieme plot velkosti balancu vsetkych penazeniek v log skale
# PCA
# vyberieme len data, s ktorymi v pca budeme narabat
pcaData <- accountData[,c(2,3,5,6,7,8,9,10,13)]
colors <- rep('black', 10049)
colors[accountData[,4] == 'Exchange'] <- 'blue'
colors[accountData[,4] == 'Mining'] <- 'red'
colors[accountData[,4] == 'DeFi'] <- 'green'
# 2D pca s outlierom
pcaResultFull <- prcomp(pcaData, scale = TRUE)
# to je fajn ale ten jeden ma obrovsky balance a kvoli tomu ostatnych balance sa tazsie vie navzajom provnavat, tak ho odstranime
maxIdx <- which.max(pcaData[,9])
pcaDataOriginal <- pcaData
pcaData <- pcaData[-maxIdx,]
pcaResult <- prcomp(pcaData, scale = TRUE)
colors <- colors[-maxIdx]
autoplot( pcaResult,
data=pcaResult,
col = colors,
loadings=TRUE,
loadings.label = TRUE)
# summary(pcaResult)
# lepsie pca zobrazenie
library(ggfortify)
autoplot( pcaResult,
data=pcaResult,
col = colors,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 7)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
#K-medoids
library(cluster)
planets.kmedoids <- pam(pcaData, k = 4)
kMedoidsResult <- pam(pcaData, k = 4)
kMedoidsResult
kMedoidsResult$clustering
kMedoidsResult$cluster
autoplot( pcaResult,
data = pcaResult,
col = kMedoidsResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMedoidsResult <- pam(pcaData, k = 6)
autoplot( pcaResult,
data = pcaResult,
col = kMedoidsResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMedoidsResult <- pam(pcaData, k = 4)
autoplot( pcaResult,
data = pcaResult,
col = kMedoidsResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMedoidsResult <- pam(scale(pcaData), k = 4)
autoplot( pcaResult,
data = pcaResult,
col = kMedoidsResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMedoidsResult <- pam(scale(pcaData), k = 6)
autoplot( pcaResult,
data = pcaResult,
col = kMedoidsResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaDataOriginal), 6)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
pcaDataOriginal
kMeansResult <- kmeans(scale(pcaDataOriginal), 6)
autoplot( pcaDataOriginal,
data = pcaDataOriginal,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
autoplot( pcaDataOriginal,
data = pcaDataOriginal,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult$cluster
kMeansResult <- kmeans(scale(pcaData), 6)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult$cluster
kMeansResult$clusterpcaDataOriginal
pcaDataOriginal
kMedoidsResult <- pam(scale(pcaDataOriginal), k = 6)
kMeansResult <- kmeans(scale(pcaDataOriginal), 6)
autoplot( pcaDataOriginal,
data = pcaDataOriginal,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaDataOriginal), 1)
autoplot( pcaDataOriginal,
data = pcaDataOriginal,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaDataOriginal),5)
autoplot( pcaResultFull,
data = pcaResultFull,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
plot(1:30, xlab = 'k', ylab = 'MSL', best, type = "b")
plot(1:30, xlab = 'k', ylab = 'the total within-cluster sum of squares', best, type = "b")
kMeansResult <- kmeans(scale(pcaData), 4)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 4)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 5)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 6)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 6)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 6)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 6)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 6)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 6)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 5)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 5)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 5)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 5)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 5)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 5)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 4)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 4)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
autoplot( pcaResultFull,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaResultFull), 4)
kMeansResult <- kmeans(scale(pcaDataOriginal), 4)
autoplot( pcaResultFull[-maxIdx],
data = pcaResultFull[-maxIdx],
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaDataOriginal), 4)
pcaResultFull[1,]
pcaResultFull
pcaResultFull$x[,2]
kMeansResult <- kmeans(scale(pcaDataOriginal), 4)
dim(pcaResultFull)
pcaResultFull$x
dim(pcaResultFull$x)
autoplot( pcaResultFull,
data = pcaResultFull$x[-maxIdx,],
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
autoplot( pcaResultFull,
data = pcaResultFull$x[-maxIdx,],
col = kMeansResult$cluster[-maxIdx],
loadings=TRUE,
loadings.label = TRUE)
kMeansResult$cluster[-maxIdx]
dim(kMeansResult$cluster[-maxIdx])
length(kMeansResult$cluster[-maxIdx])
length(pcaResultFull$x[-maxIdx])
dim(pcaResultFull$x[-maxIdx])
dim(pcaResultFull$x[-maxIdx,])
dim(pcaResultFull[-maxIdx,])
kMeansResultľ <- kmeans(pcaResult, 4)
kMeansResultľ <- kmeans(pcaResult$x, 4)
kMeansResult2 <- kmeans(pcaResult$x, 4)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult2$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult2 <- kmeans(pcaResult$x, 6)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult2$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult2 <- kmeans(pcaResult$x, 8)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult2$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult2 <- kmeans(pcaResult$x, 3)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult2$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult2 <- kmeans(pcaResult$x, 4)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult2$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 4)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 4)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 4)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
kMeansResult <- kmeans(scale(pcaData), 4)
autoplot( pcaResult,
data = pcaResult,
col = kMeansResult$cluster,
loadings=TRUE,
loadings.label = TRUE)
# plot vysledkov kMeans v 3D PCA
scale <- 100
options(rgl.printRglwidget = TRUE)
plot3d(pcaResult$x[,1:3], col=kMeansResult$cluster)
coords <- NULL
for (i in 1:nrow(pcaResult$rotation)) {
coords <- rbind(coords, rbind(c(0,0,0),pcaResult$rotation[i,1:3]))
}
text3d(pcaResult$rotation[,1:3] * scale ,
texts=rownames(pcaResult$rotation),
col="red",
cex=0.8)
coords <- coords * scale
lines3d(coords, col="red", lwd=2)
